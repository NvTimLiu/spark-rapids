#!/usr/local/env groovy

@Library('shared-libs') _

def urmUrl="https://${ArtifactoryConstants.ARTIFACTORY_NAME}/artifactory/sw-spark-maven"
def CUDA_DOCKER="cuda10-1"
def CUDA_NAME=CUDA_DOCKER.replace("-", ".")

def podConf="""
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: "$CUDA_DOCKER"
    image: xgbci/rapids-plugin-build:ubuntu16-"$CUDA_NAME"
    resources:
      limits:
        nvidia.com/gpu: 1
    restartPolicy: Never
    backoffLimit: 4
    tty: true

  - name: docker
    image: docker:19.03.1
    command:
    - sleep
    args:
    - 99d
    env:
      - name: DOCKER_HOST
        value: tcp://localhost:2375
  - name: docker-daemon
    image: docker:19.03.1-dind
    securityContext:
      privileged: true
    env:
      - name: DOCKER_TLS_CERTDIR
        value: ""

  nodeSelector:
    kubernetes.io/os: linux
"""
println podConf

pipeline {
    agent {
        kubernetes {
            label 'plugin-dev'
            cloud 'sc-ipp-blossom-prod'
            yaml "${podConf}"
        }
    }
    options {
        ansiColor('xterm')
        timeout(time: 120, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    parameters {
        string(name: 'REF', defaultValue: '\${sha1}', description: 'Commit to build')
    }

    environment {
        JENKINS_ROOT  = 'jenkins'
        BUILD_SCRIPT = '$JENKINS_ROOT/spark-premerge-build.sh'
        MVN_URM_MIRROR='-s jenkins/settings.xml -P mirror-apache-to-urm'
        LIBCUDF_KERNEL_CACHE_PATH='/tmp/.cudf'
        ARTIFACTORY_NAME = "${ArtifactoryConstants.ARTIFACTORY_NAME}"
        URM_URL = "${urmUrl}"
    }

    stages {
        stage('Build docker image') {
            steps {
                script {
                    container('docker') {
                        def IMAGE_NAME="$ARTIFACTORY_NAME/sw-spark-docker/plugin:dev-ubuntu16-$CUDA_NAME"
                        def CUDA_VER="$CUDA_NAME" - "cuda"
                        sh "docker pull $IMAGE_NAME || true"
                        // Speed up Docker building via '--cache-from $IMAGE_NAME'
                        def buildImage=docker.build(IMAGE_NAME,
                            "-f jenkins/Dockerfile.ubuntu16 --build-arg CUDA_VER=$CUDA_VER --cache-from $IMAGE_NAME -t $IMAGE_NAME .")
                        }
                    }
                }
            }
        }
        stage('Build on centos7 CUDA10.1') {
            steps {
                script {
                    container('cuda10-1') {
                        sh "bash $BUILD_SCRIPT"
                        step([$class: 'JacocoPublisher',
                              execPattern: '**/target/jacoco.exec',
                              classPattern: 'target/jacoco_classes/',
                              sourcePattern: 'sql-plugin/src/main/java/,sql-plugin/src/main/scala/,shuffle-plugin/src/main/scala/',
                              sourceInclusionPattern: '**/*.java,**/*.scala'
                        ])
                    }
                }
            }
        }
    }
}
