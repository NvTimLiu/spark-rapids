#!/usr/local/env groovy
/*
 * Copyright (c) 2020-2024, NVIDIA CORPORATION.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 *
 * Jenkinsfile for building rapids-plugin on blossom
 *
 */
import hudson.model.Result
import hudson.model.Run
import jenkins.model.CauseOfInterruption.UserInterruption

@Library('tim-blossom-lib')
@Library('blossom-github-lib@master')
import ipp.blossom.*

def githubHelper // blossom github helper
def TEMP_IMAGE_BUILD = true
def CUDA_NAME = 'cuda11.0.3' // hardcode cuda version for docker build part
def PREMERGE_DOCKERFILE = 'jenkins/Dockerfile-blossom.ubuntu'
def IMAGE_PREMERGE // temp image for premerge test
def IMAGE_DB = pod.getCPUYAML("${common.ARTIFACTORY_NAME}/sw-spark-docker/spark:rapids-databricks-v0.2")
def PREMERGE_TAG
def skipped = false
def db_build = true
def sourcePattern = 'shuffle-plugin/src/main/scala/,udf-compiler/src/main/scala/,' +
    'sql-plugin/src/main/java/,sql-plugin/src/main/scala/'
// The path where the CI_PART1 job shares rapids plugin built tars with the CI_PART job
def plugin_built_dir = "dbfs:/cicd/$BUILD_TAG"

pipeline {
    agent {
        kubernetes {
            label "premerge-init-${BUILD_TAG}"
            cloud "${common.CLOUD_NAME}"
            yaml "${IMAGE_DB}"
        }
    }

    options {
        ansiColor('xterm')
        buildDiscarder(logRotator(numToKeepStr: '50'))
        skipDefaultCheckout true
        timeout(time: 12, unit: 'HOURS')
    }

    parameters {
        // Put a default value for REF to avoid error when running the pipeline manually
        string(name: 'REF', defaultValue: 'main',
            description: 'Merged commit of specific PR')
        string(name: 'GITHUB_DATA', defaultValue: '',
            description: 'Json-formatted github data from upstream blossom-ci')
    }

    environment {
        JENKINS_ROOT = 'jenkins'
        PREMERGE_SCRIPT = '$JENKINS_ROOT/spark-premerge-build.sh'
        MVN_URM_MIRROR = '-s jenkins/settings.xml -P mirror-apache-to-urm'
        LIBCUDF_KERNEL_CACHE_PATH = '/tmp/.cudf'
        ARTIFACTORY_NAME = "${common.ARTIFACTORY_NAME}"
        GITHUB_TOKEN = credentials("github-token")
        URM_CREDS = credentials("urm_creds")
        URM_URL = "https://${common.ARTIFACTORY_NAME}/artifactory/sw-spark-maven"
        PVC = credentials("pvc")
        CUSTOM_WORKSPACE = "/home/jenkins/agent/workspace/${BUILD_TAG}"
        CLASSIFIER = 'cuda11'
    }

    stages {
        stage("Init githubHelper") {
            steps {
                script {
                    checkoutCode('https://github.com/NVTIMLIU/spark-rapids', 'db-shared-jars')
                }
            }
        } // end of Init githubHelper


        stage('Premerge Test') {
            // Parallel run mvn verify (build and integration tests) and unit tests (for multiple Spark versions)
            // If any one is failed will abort another if not finish yet and will upload failure log to Github
            failFast true
            parallel {
                stage('Databricks IT part1') {
                    when {
                        expression { db_build }
                    }
                    steps {
                        script {
                            //CI_PART1 upload plugin buit tars to PLUGIN_BUILT_DIR for CI_PART2
                            def DBJob = build(job: 'tim-rapids-databricks_premerge-github',
                                propagate: false, wait: true,
                                parameters: [
                                        string(name: 'REF', value: "db-shared-jars"),
                                        string(name: 'GITHUB_DATA', value: "https://github.com/NvTimLiu/spark-rapids"),
                                        string(name: 'TEST_MODE', value: 'CI_PART1'),
                                        string(name: 'PLUGIN_BUILT_DIR', value: "$plugin_built_dir"),
                                ])
                            if ( DBJob.result != 'SUCCESS' ) {
                                // Output Databricks failure logs to uploaded onto the pre-merge PR
                                print(DBJob.getRawBuild().getLog())
                                // Fail the pipeline
                                error "Databricks part1 result : " + DBJob.result
                            }
                        }
                    }
                } // end of Databricks IT part1

                stage('Databricks IT part2') {
                    when {
                        expression { db_build }
                    }
                    steps {
                        script {
                            def DBJob = build(job: 'tim-rapids-databricks_premerge-github',
                                propagate: false, wait: true,
                                parameters: [
                                        string(name: 'REF', value: "db-shared-jars"),
                                        string(name: 'GITHUB_DATA', value: "https://github.com/NvTimLiu/spark-rapids"),
                                        string(name: 'PLUGIN_BUILT_DIR', value: "$plugin_built_dir"),
                                        string(name: 'TEST_MODE', value: 'CI_PART2')
                                ])
                            if ( DBJob.result != 'SUCCESS' ) {
                                // Output Databricks failure logs to uploaded onto the pre-merge PR
                                print(DBJob.getRawBuild().getLog())
                                // Fail the pipeline
                                error "Databricks part2 result : " + DBJob.result
                            }
                        }
                    }
                } // end of Databricks IT part2

                stage('Dummy stage: blue ocean log view') {
                    steps {
                        echo "workaround for blue ocean bug https://issues.jenkins.io/browse/JENKINS-48879"
                    }
                } // Dummy stage
            } // end of parallel
        } // end of Premerge Test
    } // end of stages
} // end of pipeline

void checkoutCode(String url, String sha) {
    checkout(
        changelog: false,
        poll: true,
        scm: [
            $class           : 'GitSCM', branches: [[name: sha]],
            userRemoteConfigs: [[
                                    credentialsId: 'github-token',
                                    url          : url]],
             extensions      : [[$class: 'CloneOption', shallow: true]]
        ]
    )
    sh "git submodule update --init"
    if (!common.isSubmoduleInit(this)) {
        error "Failed to clone submodule : thirdparty/parquet-testing"
    }

    stash(name: "source_tree", includes: "**,.git/**", useDefaultExcludes: false)
}

boolean databricksCodeChanged() {
    def output = sh(script: '''
            # get merge BASE from merged pull request. Log message e.g. "Merge HEAD into BASE"
            BASE_REF=$(git --no-pager log --oneline -1 | awk '{ print $NF }')
            git --no-pager diff --name-only ${BASE_REF} HEAD | grep -lE 'sql-plugin/src/main/.*[0-9x-]db/|databricks' || true
        ''', returnStdout: true).trim()

    if (output) {
        echo "Found databricks-related changed files"
        return true
    }
    return false
}
